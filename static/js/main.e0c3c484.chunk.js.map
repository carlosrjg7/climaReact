{"version":3,"sources":["components/ClimaLocation/Location/index.js","components/ClimaLocation/ClimaData/ClimaTemperatura.js","constants/climas.js","components/ClimaLocation/ClimaData/ClimaExtraInfo.js","components/ClimaLocation/ClimaData/index.js","components/ClimaLocation/index.js","components/LocationList.js","constants/api.js","services/transformWeather.js","services/transformForecast.js","actions/index.js","reducer/cities.js","reducer/index.js","reducer/city.js","container/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","container/ForecastExtendedContainer.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["Location","city","className","icons","ClimaTemperatura","temperatura","state","icon","name","size","getWeatheIcon","ClimaExtraInfo","humidity","wind","ClimaData","data","ClimaLocation","onClimaLocationClick","onClick","CircularProgress","LocationList","cities","onSelectedLocation","console","log","map","key","handleClimaLocationClick","strToComp","apiKey","transformWeather","weather_data","kelvin","main","temp","speed","weatherState","weather","id","getWatherState","Number","convert","from","to","toFixed","transformForecast","list","filter","item","moment","unix","dt","utc","hour","weekDay","format","SET_CITY","SET_FORECAST_DATA","GET_WEATHER_CITY","SET_WEATHER_CITY","setSelectedCity","payload","dispatch","getState","url_forecast","type","setCity","date","forecastDate","now","Date","fetch","then","json","forecastData","setForecastData","setWeather","forEach","getWeatherCity","api_clima","setWeatherCity","getForecastDataFromCities","createSelector","getWeatherCities","toPairs","combineReducers","action","getCity","_getForecastDataFromCities","_getWeatherCities","LocationListContainer","handleSelectionLocation","props","this","citiesWeather","Component","connect","bindActionCreators","actions","ForecastItem","ForecastExtended","forecast","renderForecastItemDays","ForecastExtendedContainer","App","AppBar","position","Toolbar","Typography","variant","color","xs","md","Paper","elevation","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0c3c484.chunk.js","sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\n\nimport './../style.css';\n\nconst Location = ({ city }) => {\n  return(\n    <div className=\"LocationCont\">\n      <h1>{ city }</h1>\n    </div>\n  );\n};\n\nLocation.propTypes = {\n  city: propTypes.string.isRequired,\n};\n\nexport default Location;\n","import React from 'react';\nimport WeatherIcons from 'react-weathericons';\nimport propTypes from 'prop-types';\n\nimport {\n  CLOUD,\n  RAIN,\n  SUN,\n  SNOW,\n  THUNDER,\n  DRIZZLE,\n} from './../../../constants/climas';\n\nimport './style.css';\n\nconst icons = {\n      [CLOUD]: \"cloud\",\n       [RAIN]: \"rain\",\n        [SUN]: \"day-sunny\",\n        [SNOW]: \"snow\",\n        [THUNDER]: \"day-thunderstorm\",\n        [DRIZZLE]: \"day-showers\",\n}\n\nconst getWeatheIcon = state =>{\n  const icon = icons[state];\n\n  const sizeIcon = \"4x\";\n\n  if(icon)\n    return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\n  else\n    return <WeatherIcons className=\"wicon\" name={\"day-sunny\"}  size={sizeIcon} />\n}\n\n\nconst ClimaTemperatura = ({temperatura, state}) => (\n  <div className=\"climaTemperature\">\n    {\n      getWeatheIcon(state)\n    }\n    <span className=\"temp\">{`${temperatura} `}</span>\n    <span className=\"tempType\">{`CÂ°`}</span>\n  </div>\n);\n\nClimaTemperatura.propTypes = {\n  temperatura: propTypes.number.isRequired,\n  state: propTypes.string.isRequired,\n};\n\n\nexport default ClimaTemperatura;\n","export const CLOUD = \"cloud\";\n\nexport const RAIN = \"rain\";\n\nexport const SUN = \"sun\";\n\nexport const CLOUDY = \"cloudy\";\n\nexport const SNOW = \"snow\";\n\nexport const WINDY = \"windy\";\n\nexport const THUNDER = \"thunder\";\n\nexport const DRIZZLE = \"drizzle\";\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nimport './style.css';\n\nconst ClimaExtraInfo = ({humidity, wind}) =>(\n  <div className=\"climaExtraInfoCont\">\n    <span className=\"climaExtraText\">{`Humedad ${humidity} %`}</span>\n    <span className=\"climaExtraText\">{`Vientos ${wind}`}</span>\n  </div>\n);\n\n\n\nClimaExtraInfo.propTypes = {\n  humidity: propTypes.number.isRequired,\n  wind: propTypes.string.isRequired,\n};\n\nexport default ClimaExtraInfo;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport ClimaTemperatura from './ClimaTemperatura';\nimport ClimaExtraInfo from './ClimaExtraInfo';\n\nimport './style.css';\n\n\nconst ClimaData = ({data : {temperatura,state,humidity,wind} }) =>{\n  return (\n  <div className=\"climaData\">\n    <ClimaTemperatura temperatura={temperatura} state={state}/>\n    <ClimaExtraInfo humidity={humidity} wind={wind} />\n  </div>\n);\n};\n\nClimaData.propTypes = {\n  data: propTypes.shape({\n    temperatura: propTypes.number.isRequired,\n    state: propTypes.string.isRequired,\n    humidity: propTypes.number.isRequired,\n    wind: propTypes.string.isRequired,\n  })\n}\n\nexport default ClimaData;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Location from './Location';\nimport ClimaData from './ClimaData';\n//import getClimaByCity from './../../services/getClimaByCity';\n\n// import {api} from './../../constants/api';\n\n\nimport './style.css';\n\n// componentDidMount(){\n//   console.log('did mount');\n//   this.handleUpdateClick();\n// }\n//\n// componentDidUpdate(prevProps, prevState){\n//   console.log(\"did update\");\n//\n// }\n\n// handleUpdateClick = () =>{\n//   const api = getClimaByCity(this.state.city);\n//   fetch(api).then(resolve => {\n//     return resolve.json();\n//   }).then(data => {\n//     const newClima = transformWeather(data);\n//     console.log(newClima);\n//     this.setState({\n//       data:newClima,\n//     });\n//   });\n//\n// }\n\nconst ClimaLocation = ({ onClimaLocationClick ,city, data}) => {\n      return(\n      <div className=\"climaLocationCont\" onClick={onClimaLocationClick}>\n        <Location city={city}/>\n        { data ? <ClimaData data={data}/> : <CircularProgress size={50}/>}\n      </div>);\n};\n\n\nClimaLocation.propTypes = {\n  city: propTypes.string,\n  onClimaLocationClick: propTypes.func,\n  data: propTypes.shape({\n    temperatura: propTypes.number.isRequired,\n    state: propTypes.string.isRequired,\n    humidity: propTypes.number.isRequired,\n    wind: propTypes.string.isRequired,\n  })\n}\n\nexport default ClimaLocation;\n","import React from 'react';\nimport ClimaLocation from './ClimaLocation';\nimport propTypes from 'prop-types';\nimport './style.css';\n\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n\n  const handleClimaLocationClick = city => {\n      console.log(\"handleClimaLocationClick\");\n      onSelectedLocation(city);\n  }\n\n\n\n  const strToComp = cities =>{\n    return cities.map( city => {\n                    return  <ClimaLocation\n                            key={city.key}\n                            city={city.name}\n                            onClimaLocationClick={() => handleClimaLocationClick(city.name)}\n                            data={city.data}\n                        />})\n  };\n\nconsole.log(cities);\n  return(\n    <div className=\"LocationList\">\n      {\n        strToComp(cities)\n      }\n    </div>\n  )\n};\n\nLocationList.propTypes = {\n  cities: propTypes.array.isRequired,\n  onSelectedLocation: propTypes.func,\n}\nexport default LocationList;\n","\nexport const apiKey = 'c1a32c6a16e3c7c67e682396eb583f15';\nexport const url = 'https://api.openweathermap.org/data/2.5/weather';\nexport const urlForecast = 'https://api.openweathermap.org/data/2.5/forecast'\n","import convert from 'convert-units';\n\nimport {\n        CLOUD,\n        RAIN,\n        SUN,\n        SNOW,\n        THUNDER,\n        DRIZZLE,\n} from './../constants/climas';\n\nconst getTemp = kelvin =>{\n  return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\n}\n\nconst getWatherState = weather =>{\n  const {id} = weather;\n  if(id < 300){\n    return THUNDER;\n  }else if(id < 400){\n    return DRIZZLE;\n  }else if(id < 600){\n    return RAIN;\n  }else if(id < 700){\n    return SNOW;\n  }else if( id === 800){\n    return SUN;\n  }else {\n    return CLOUD;\n  }\n}\n\nconst transformWeather = weather_data =>{\n  const { humidity, temp } = weather_data.main;\n  const { speed } = weather_data.wind;\n  const weatherState = getWatherState(weather_data.weather[0]);\n  const temperatura = getTemp(temp);\n\n  const data = {\n    humidity,\n    temperatura,\n    state: weatherState,\n    wind: `${speed} m/s`,\n  }\n\n  return data;\n}\n\nexport default transformWeather;\n","import moment from 'moment';\nimport 'moment/locale/es';\nimport transformWeather from './transformWeather';\n\nconst transformForecast = data => (\n  data.list.filter( item => (\n    moment.unix(item.dt).utc().hour() === 6 || moment.unix(item.dt).utc().hour() === 12 || moment.unix(item.dt).utc().hour() === 18 ||\n    moment.unix(item.dt).hour() === 6 || moment.unix(item.dt).hour() === 12 || moment.unix(item.dt).hour() === 18\n  )).map(item => (\n    {\n      weekDay: moment.unix(item.dt).format('ddd'),\n      hour: moment.unix(item.dt).hour(),\n      data: transformWeather(item),\n    }\n  ))\n);\n\nexport default transformForecast;\n","import { urlForecast, apiKey, url} from './../constants/api';\nimport transformForecast from './../services/transformForecast';\nimport transformWeather from './../services/transformWeather';\n\nexport const SET_CITY = 'SET_CITY';\nexport const SET_FORECAST_DATA = 'SET_FORECAST_DATA';\n\nexport const GET_WEATHER_CITY = 'GET_WEATHER_CITY';\nexport const SET_WEATHER_CITY = 'SET_WEATHER_CITY';\n\nconst setCity = payload => ({ type: SET_CITY, payload });\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload });\n\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\n\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload });\n\n\nexport const setSelectedCity = payload => {\n\n  return (dispatch , getState ) => {\n\n    const url_forecast = `${urlForecast}?q=${payload}&appid=${apiKey}`;\n    console.log(url_forecast);\n\n    // activar en el estado un indicador de busqueda de datos\n    dispatch(setCity(payload));\n    const state = getState();\n    const date = state.cities[payload] && state.cities[payload].forecastDate;\n    const now = new Date();\n\n    if(date && (now - date) < 1 * 60 * 1000 ){\n      return;\n    }\n    return fetch(url_forecast).then(\n      data => (data.json())\n    ).then(\n      weather_data => {\n        const forecastData = transformForecast(weather_data);\n        console.log(forecastData);\n\n        //modificar el estado con el resultado d ela promise (fetch)\n        dispatch(setForecastData({ city: payload, forecastData }));\n      }\n    );\n  }\n};\n\n\nexport const setWeather = payload =>{\n  return dispatch => {\n    payload.forEach( city => {\n\n      dispatch(getWeatherCity(city));\n\n      const api_clima = `${url}?q=${payload}&appid=${apiKey}`;\n      fetch(api_clima).then(data => {\n        return data.json();\n      }).then( weather_data => {\n        const weather = transformWeather(weather_data);\n\n        dispatch(setWeatherCity({ city , weather }))\n\n      })\n    })\n  }\n\n}\n","import { createSelector } from 'reselect';\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from './../actions';\nimport toPairs from 'lodash.topairs';\n\nexport const cities = (state = {}, action) => {\n  switch (action.type) {\n    case SET_FORECAST_DATA: {\n      const { city, forecastData } = action.payload;\n      return {...state, [city]: { ...state[city], forecastData, forecastDate: new Date() }}\n      }\n    case GET_WEATHER_CITY: {\n      const city = action.payload;\n      return {...state, [city]: {...state[city], weather: null }};\n    }\n    case SET_WEATHER_CITY: {\n      const { city, weather } = action.payload;\n      return {...state,[city]:{...state[city], weather }};\n    }\n    default:\n      return state;\n  }\n}\n\n\nexport const getForecastDataFromCities =\n createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\n\nconst fromObjToArray = cities => (toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather })));\n\nexport const getWeatherCities = createSelector(state => fromObjToArray(state), cities => cities);\n","import { combineReducers } from 'redux';\nimport { createSelector } from 'reselect';\nimport { cities , getForecastDataFromCities as _getForecastDataFromCities ,\ngetWeatherCities as _getWeatherCities } from './cities';\nimport { city } from './city';\n\nexport default combineReducers({\n  cities,\n  city\n});\n\nexport const getCity = createSelector(state => state.city, city => city );\nexport const getForecastDataFromCities = createSelector( state => state.cities, getCity, _getForecastDataFromCities);\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities);\n","import { SET_CITY } from './../actions';\n\nexport const city = (state = {}, action) => {\n  switch (action.type){\n    case SET_CITY:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n","import React, { Component } from 'react';\nimport { bindActionCreators } from 'redux';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n// import { setSelectedCity, setWeather } from './../actions';\nimport LocationList from './../components/LocationList';\nimport { getWeatherCities, getCity } from './../reducer';\nimport * as actions from './../actions';\n\n\nclass LocationListContainer extends Component {\n\n  componentDidMount(){\n    //const { setWeather, cities, city, setSelectedCity } = this.props;\n    const { cities, city } = this.props;\n    this.props.setWeather(cities);\n    this.props.setSelectedCity(city);\n  }\n\n  handleSelectionLocation = city => {\n    this.props.setSelectedCity(city);\n  }\n\n  render() {\n    console.log(this.props.citiesWeather);\n    return (\n        <LocationList cities={this.props.citiesWeather} onSelectedLocation={this.handleSelectionLocation} />\n    );\n  }\n}\n\nLocationListContainer.propTypes = {\n  //setCity: propTypes.func.isRequired,\n  cities: propTypes.array.isRequired,\n  citiesWeather : propTypes.array,\n  city: propTypes.string.isRequired,\n  setSelectedCity: propTypes.func.isRequired,\n  setWeather: propTypes.func.isRequired,\n\n};\n\n// const mapDispatchToProps = dispatch => ({\n//   setCity: value => dispatch(setSelectedCity(value)),\n//    setWeather: cities => dispatch(setWeather(cities))\n// });\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n// const mapDispatchToProps = dispatch => ({\n//   setSelectedCity: value => dispatch(setSelectedCity(value)),\n//    setWeather: cities => dispatch(setWeather(cities))\n// });\n\nconst mapStateToProps = state => ({ citiesWeather: getWeatherCities(state), city: getCity(state) });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationListContainer);\n","import React from 'react';\nimport propTypes  from 'prop-types';\nimport ClimaData from './../ClimaLocation/ClimaData';\n\n\nconst ForecastItem = ({weekDay, hour, data }) =>{\n  return (\n    <div>\n      <div><h2>{ weekDay } Hora: { hour }hs</h2></div>\n      <ClimaData data={data}/>\n    </div>\n    );\n}\n\nForecastItem.propTypes = {\n  weekDay: propTypes.string.isRequired,\n  hour: propTypes.number.isRequired,\n  data: propTypes.shape({\n    temperatura: propTypes.number.isRequired,\n    state: propTypes.string.isRequired,\n    humidity: propTypes.number.isRequired,\n    wind: propTypes.string.isRequired,\n  })\n}\n\nexport default ForecastItem;\n","import React from \"react\";\nimport propTypes from 'prop-types';\nimport ForecastItem from './ForecastItem';\nimport './style.css';\n\n\nconst renderForecastItemDays = (forecastData) =>{\n  return forecastData.map(forecast => (\n    <ForecastItem key={`${forecast.weekDay}${forecast.hour}`} weekDay={forecast.weekDay} hour={forecast.hour} data={forecast.data}/>));\n}\n\nconst renderProgress = () =>{\n  return <h3>cargando pronostico</h3>;\n}\n\nconst ForecastExtended = ({ city, forecastData }) =>{\n    return (\n     <div className=\"Forecast-title\">\n        <h2>Pronostico extendido {city}</h2>\n        {forecastData ? renderForecastItemDays(forecastData): renderProgress()}\n      </div>);\n}\n\nForecastExtended.propTypes = {\n  city: propTypes.string.isRequired,\n  forecastData: propTypes.array,\n}\n\nexport default ForecastExtended;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport ForecastExtended from './../components/ForecastExtended';\nimport { connect } from 'react-redux';\nimport { getForecastDataFromCities,getCity } from './../reducer';\n\nclass ForecastExtendedContainer extends Component {\n  render(){\n    const { city , forecastData } = this.props;\n    return (\n      city &&\n      <ForecastExtended city={city} forecastData = { forecastData }/>\n    );\n  }\n}\n\nForecastExtendedContainer.propTypes = {\n  city: propTypes.string.isRequired,\n  forecastData: propTypes.array,\n}\n\nconst mapStateToProps = state => ({city: getCity(state), forecastData: getForecastDataFromCities(state) });\n\nexport default connect(mapStateToProps, null)(ForecastExtendedContainer);\n","import React,{Component} from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport LocationListContainer from './container/LocationListContainer';\nimport ForecastExtendedContainer from './container/ForecastExtendedContainer';\nimport { Grid, Col, Row } from 'react-flexbox-grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\n\n\nimport './App.css';\n\n\nconst cities = [\n  \"barquisimeto,ve\",\n  \"bogota,col\",\n  \"Madrid,es\",\n  \"Lima,pe\",\n];\n\nclass App extends Component{\n\n  render(){\n    return (\n      <Grid className=\"App\">\n      <Row>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <Typography variant=\"subtitle1\" color=\"inherit\">\n              Clima App\n            </Typography>\n          </Toolbar>\n        </AppBar>\n      </Row>\n      <Row>\n        <Col xs={12} md={6}>\n          <LocationListContainer cities={cities}/>\n        </Col>\n        <Col xs={12} md={6}>\n          <Paper elevation={4}>\n            <div className=\"Details\">\n              <ForecastExtendedContainer/>\n            </div>\n          </Paper>\n        </Col>\n      </Row>\n\n      </Grid>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducer from './../reducer';\n\nconst initialState = {\n  city: 'Barquisimeto, ve'\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducer,initialState, composeEnhancers(applyMiddleware(thunk)));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}